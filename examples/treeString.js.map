{"version":3,"sources":["webpack:///./index.js?2645","webpack:///./src/index.js?9552","webpack:///./src/diff.js?4612*","webpack:///./src/ChildOperationTypes.js?af21*","webpack:///./src/patch.js?2cda*","webpack:///./examples/treeString.js"],"names":["module","exports","require","default","diffTree","indexOf","nodes","node","isSame","nodeIndex","len","length","i","nativeShould","a","b","sortByIndex","fromIndex","diff","fromNodes","afterNodes","options","internal","shouldUpdate","childrenKey","fromPath","parentNode","insertQueue","updateQueue","removeQueue","lastIndex","tmp","forEach","afterNode","toIndex","fromNode","push","type","concat","toPath","Math","max","sort","o","currentChildren","nextChildren","ret","MOVE","UPDATE","REMOVE","NEW","patch","processNew","processUpdate","processMove","processRemove","q","moves","join","value","children","operations","v1","v2","console","log","getArray","ensure","array","splice","arr","r"],"mappings":"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","file":"treeString.js","sourcesContent":["module.exports = require('./src/');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","export { default as diff } from './diff';\nexport { default as patch } from './patch';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { UPDATE, MOVE, REMOVE, NEW } from './ChildOperationTypes';\n\nfunction indexOf(nodes, node, isSame, nodeIndex) {\n  const len = nodes.length;\n  for (let i = 0; i < len; i++) {\n    if (isSame(node, nodes[i], nodeIndex, i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction nativeShould(a, b) {\n  return a === b;\n}\n\nfunction sortByIndex(a, b) {\n  if (a.fromIndex === b.fromIndex) {\n    return 0;\n  }\n  return a.fromIndex > b.fromIndex ? -1 : 1;\n}\n\n// diff by level\nfunction diff(fromNodes, afterNodes, options = {}, internal = {}) {\n  const { shouldUpdate = nativeShould, childrenKey = 'children' } = options;\n  const { fromPath = [], parentNode } = internal;\n  let insertQueue = [];\n  let updateQueue = [];\n  let removeQueue = [];\n  let lastIndex = 0;\n  let tmp;\n  afterNodes.forEach((afterNode, toIndex) => {\n    const fromIndex = indexOf(fromNodes, afterNode, shouldUpdate, toIndex);\n    if (fromIndex !== -1) {\n      const fromNode = fromNodes[fromIndex];\n      updateQueue.push({\n        type: UPDATE,\n        fromNode,\n        afterNode,\n        parentNode,\n        fromIndex,\n        fromPath: fromPath.concat(fromIndex),\n      });\n      if (fromIndex < lastIndex) {\n        tmp = {\n          type: MOVE,\n          fromNode,\n          afterNode,\n          parentNode,\n          fromIndex,\n          toIndex,\n          fromPath: fromPath.concat(fromIndex),\n          toPath: fromPath.concat(toIndex),\n        };\n        insertQueue.push(tmp);\n        removeQueue.push(tmp);\n      }\n      lastIndex = Math.max(fromIndex, lastIndex);\n    } else {\n      insertQueue.push({\n        type: NEW,\n        afterNode,\n        parentNode,\n        toIndex,\n        toPath: fromPath.concat(toIndex),\n      });\n    }\n  });\n\n  fromNodes.forEach((fromNode, fromIndex) => {\n    const toIndex = indexOf(afterNodes, fromNode, shouldUpdate, fromIndex);\n    if (toIndex === -1) {\n      removeQueue.push({\n        type: REMOVE,\n        fromNode,\n        parentNode,\n        fromIndex,\n        fromPath: fromPath.concat(fromIndex),\n      });\n    }\n  });\n\n  removeQueue.sort(sortByIndex);\n\n  if (childrenKey) {\n    updateQueue.concat().forEach((o) => {\n      const currentChildren = o.fromNode[childrenKey] || [];\n      const nextChildren = o.afterNode[childrenKey] || [];\n      // bottom up\n      const ret = diff(currentChildren, nextChildren, options, {\n        fromPath: o.fromPath,\n        parentNode: o.fromNode,\n      });\n      insertQueue = ret.insertQueue.concat(insertQueue);\n      updateQueue = ret.updateQueue.concat(updateQueue);\n      removeQueue = ret.removeQueue.concat(removeQueue);\n    });\n  }\n\n  return {\n    insertQueue,\n    updateQueue,\n    removeQueue,\n  };\n}\n\nexport default function diffTree(fromNodes, afterNodes, options) {\n  return diff(fromNodes, afterNodes, options);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/diff.js\n **/","export const MOVE = 'move';\nexport const UPDATE = 'update';\nexport const REMOVE = 'remove';\nexport const NEW = 'new';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChildOperationTypes.js\n **/","import { MOVE, NEW } from './ChildOperationTypes';\n\nfunction patch({ removeQueue, insertQueue, updateQueue }, {\n  processNew,\n  processUpdate,\n  processMove,\n  processRemove,\n}) {\n  updateQueue.forEach((q) => {\n    processUpdate(q);\n  });\n\n  const moves = {};\n\n  removeQueue.forEach((q) => {\n    const ret = processRemove(q);\n    if (q.type === MOVE) {\n      moves[q.toPath.join(',')] = ret;\n    }\n  });\n\n  insertQueue.forEach((q) => {\n    if (q.type === NEW) {\n      processNew(q);\n    } else if (q.type === MOVE) {\n      processMove(q, moves[q.toPath.join(',')]);\n    }\n  });\n}\n\nexport default patch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/patch.js\n **/","/* eslint no-console:0 */\n\nimport { diff, patch } from 'tree-diff';\n\nconst a = [{ value: '1' }, { value: '2', children: ['1', '2', '3'] }, { value: '3' }];\nconst b = [{ value: '4' }, { value: '3' }, { value: '1' },\n  { value: '2', children: ['4', '3', '1', '2'] }];\n\nconst operations = diff(a, b, {\n  shouldUpdate(v1, v2) {\n    if (v1.value && v2.value) {\n      return v1.value === v2.value;\n    }\n    return v1 === v2;\n  },\n});\n\nconsole.log('operations', operations);\n\nfunction getArray(q, ensure = true) {\n  let array;\n  if (q.parentNode) {\n    array = q.parentNode.children;\n    if (ensure) {\n      array = q.parentNode.children = q.parentNode.children || [];\n    }\n  } else {\n    array = a;\n  }\n  return array;\n}\n\npatch(operations, {\n  processNew(q) {\n    getArray(q).splice(q.toIndex, 0, q.afterNode);\n  },\n  processRemove(q) {\n    const arr = getArray(q);\n    const r = arr[q.fromIndex];\n    arr.splice(q.fromIndex, 1);\n    return r;\n  },\n  processUpdate() {\n  },\n  processMove(q, r) {\n    getArray(q).splice(q.toIndex, 0, r);\n  },\n});\n\nconsole.log(a, b);\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/treeString.js\n **/"],"sourceRoot":""}