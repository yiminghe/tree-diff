{"version":3,"sources":["webpack:///./index.js?2645","webpack:///./src/index.js?9552","webpack:///./src/diff.js?4612*","webpack:///./src/patch.js?2cda*","webpack:///./examples/treeString.js"],"names":["module","exports","require","default","diffTree","indexOf","nodes","node","isSame","nodeIndex","len","length","i","nativeShould","a","b","sortByIndex","currentIndex","diff","currentNodes","nextNodes","options","internal","shouldUpdate","childrenKey","path","parentNode","insertQueue","updateQueue","removeQueue","lastIndex","tmp","forEach","nextNode","nextIndex","currentNode","push","type","concat","toPath","Math","max","sort","o","currentChildren","nextChildren","ret","patch","processNew","processUpdate","processMove","processRemove","q","moves","join","value","children","operations","v1","v2","console","log","getArray","ensure","array","splice","arr","r"],"mappings":"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","file":"treeString.js","sourcesContent":["module.exports = require('./src/');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","export { default as diff } from './diff';\nexport { default as patch } from './patch';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","function indexOf(nodes, node, isSame, nodeIndex) {\n  const len = nodes.length;\n  for (let i = 0; i < len; i++) {\n    if (isSame(node, nodes[i], nodeIndex, i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction nativeShould(a, b) {\n  return a === b;\n}\n\nfunction sortByIndex(a, b) {\n  if (a.currentIndex === b.currentIndex) {\n    return 0;\n  }\n  return a.currentIndex > b.currentIndex ? -1 : 1;\n}\n\n// diff by level\nfunction diff(currentNodes, nextNodes, options = {}, internal = {}) {\n  const { shouldUpdate = nativeShould, childrenKey = 'children' } = options;\n  const { path = [], parentNode } = internal;\n  let insertQueue = [];\n  let updateQueue = [];\n  let removeQueue = [];\n  let lastIndex = 0;\n  let tmp;\n  nextNodes.forEach((nextNode, nextIndex) => {\n    const currentIndex = indexOf(currentNodes, nextNode, shouldUpdate, nextIndex);\n    if (currentIndex !== -1) {\n      const currentNode = currentNodes[currentIndex];\n      updateQueue.push({\n        type: 'update',\n        currentNode,\n        nextNode,\n        parentNode,\n        path: path.concat(currentIndex),\n      });\n      if (currentIndex < lastIndex) {\n        tmp = {\n          type: 'move',\n          currentNode,\n          nextNode,\n          parentNode,\n          currentIndex,\n          path: path.concat(currentIndex),\n          toPath: path.concat(nextIndex),\n        };\n        insertQueue.push(tmp);\n        removeQueue.push(tmp);\n      }\n      lastIndex = Math.max(currentIndex, lastIndex);\n    } else {\n      insertQueue.push({\n        type: 'new',\n        nextNode,\n        parentNode,\n        toPath: path.concat(nextIndex),\n      });\n    }\n  });\n\n  currentNodes.forEach((currentNode, currentIndex) => {\n    const nextIndex = indexOf(nextNodes, currentNode, shouldUpdate, currentIndex);\n    if (nextIndex === -1) {\n      removeQueue.push({\n        type: 'remove',\n        currentNode,\n        parentNode,\n        currentIndex,\n        path: path.concat(currentIndex),\n      });\n    }\n  });\n\n  removeQueue.sort(sortByIndex);\n\n  if (childrenKey) {\n    updateQueue.concat().forEach((o) => {\n      const currentChildren = o.currentNode[childrenKey] || [];\n      const nextChildren = o.nextNode[childrenKey] || [];\n      // bottom up\n      const ret = diff(currentChildren, nextChildren, options, {\n        path: o.path,\n        parentNode: o.currentNode,\n      });\n      insertQueue = ret.insertQueue.concat(insertQueue);\n      updateQueue = ret.updateQueue.concat(updateQueue);\n      removeQueue = ret.removeQueue.concat(removeQueue);\n    });\n  }\n\n  return {\n    insertQueue,\n    updateQueue,\n    removeQueue,\n  };\n}\n\nexport default function diffTree(currentNodes, nextNodes, options) {\n  return diff(currentNodes, nextNodes, options);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/diff.js\n **/","function patch({ removeQueue, insertQueue, updateQueue }, {\n  processNew,\n  processUpdate,\n  processMove,\n  processRemove,\n}) {\n  updateQueue.forEach((q) => {\n    processUpdate(q);\n  });\n\n  const moves = {};\n\n  removeQueue.forEach((q) => {\n    const ret = processRemove(q);\n    if (q.type === 'move') {\n      moves[q.toPath.join(',')] = ret;\n    }\n  });\n\n  insertQueue.forEach((q) => {\n    if (q.type === 'new') {\n      processNew(q);\n    } else if (q.type === 'move') {\n      processMove(q, moves[q.toPath.join(',')]);\n    }\n  });\n}\n\nexport default patch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/patch.js\n **/","/* eslint no-console:0 */\n\nimport { diff, patch } from 'tree-diff';\n\nconst a = [{ value: '1' }, { value: '2', children: ['1', '2', '3'] }, { value: '3' }];\nconst b = [{ value: '4' }, { value: '3' }, { value: '1' },\n  { value: '2', children: ['4', '3', '1', '2'] }];\n\nconst operations = diff(a, b, {\n  shouldUpdate(v1, v2) {\n    if (v1.value && v2.value) {\n      return v1.value === v2.value;\n    }\n    return v1 === v2;\n  },\n});\n\nconsole.log('operations', operations);\n\nfunction getArray(q, ensure = true) {\n  let array;\n  if (q.parentNode) {\n    array = q.parentNode.children;\n    if (ensure) {\n      array = q.parentNode.children = q.parentNode.children || [];\n    }\n  } else {\n    array = a;\n  }\n  return array;\n}\n\npatch(operations, {\n  processNew(q) {\n    getArray(q).splice(q.toPath[q.toPath.length - 1], 0, q.nextNode);\n  },\n  processRemove(q) {\n    const arr = getArray(q);\n    const r = arr[q.path[q.path.length - 1]];\n    arr.splice(q.path[q.path.length - 1], 1);\n    return r;\n  },\n  processUpdate() {\n  },\n  processMove(q, r) {\n    getArray(q).splice(q.toPath[q.toPath.length - 1], 0, r);\n  },\n});\n\nconsole.log(a, b);\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/treeString.js\n **/"],"sourceRoot":""}