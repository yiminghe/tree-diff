{"version":3,"sources":["webpack:///./examples/arrayString.js","webpack:///./index.js","webpack:///./src/index.js","webpack:///./src/diff.js","webpack:///./src/patch.js"],"names":["a","b","operations","childrenKey","console","log","processNew","q","splice","toPath","nextNode","processRemove","r","path","processUpdate","processMove","module","exports","require","default","diffTree","indexOf","nodes","node","isSame","nodeIndex","len","length","i","nativeShould","sortByIndex","currentIndex","diff","currentNodes","nextNodes","options","internal","shouldUpdate","parentNode","insertQueue","updateQueue","removeQueue","lastIndex","tmp","forEach","nextIndex","currentNode","push","type","concat","Math","max","sort","o","currentChildren","nextChildren","ret","patch","moves","join"],"mappings":"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","file":"arrayString.js","sourcesContent":["/* eslint no-console:0 */\n\nimport { diff, patch } from 'tree-diff';\n\nconst a = ['1', '2', '3'];\nconst b = ['4', '3', '1', '2'];\n\nconst operations = diff(a, b, { childrenKey: '' });\n\nconsole.log('operations', operations);\n\npatch(operations, {\n  processNew(q) {\n    a.splice(q.toPath[0], 0, q.nextNode);\n  },\n  processRemove(q) {\n    const r = a[q.path[0]];\n    a.splice(q.path[0], 1);\n    return r;\n  },\n  processUpdate() {\n  },\n  processMove(q, r) {\n    a.splice(q.toPath[0], 0, r);\n  },\n});\n\nconsole.log(a, b);\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/arrayString.js\n **/","module.exports = require('./src/');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","export { default as diff } from './diff';\nexport { default as patch } from './patch';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","function indexOf(nodes, node, isSame, nodeIndex) {\n  const len = nodes.length;\n  for (let i = 0; i < len; i++) {\n    if (isSame(node, nodes[i], nodeIndex, i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction nativeShould(a, b) {\n  return a === b;\n}\n\nfunction sortByIndex(a, b) {\n  if (a.currentIndex === b.currentIndex) {\n    return 0;\n  }\n  return a.currentIndex > b.currentIndex ? -1 : 1;\n}\n\n// diff by level\nfunction diff(currentNodes, nextNodes, options = {}, internal = {}) {\n  const { shouldUpdate = nativeShould, childrenKey = 'children' } = options;\n  const { path = [], parentNode } = internal;\n  let insertQueue = [];\n  let updateQueue = [];\n  let removeQueue = [];\n  let lastIndex = 0;\n  let tmp;\n  nextNodes.forEach((nextNode, nextIndex) => {\n    const currentIndex = indexOf(currentNodes, nextNode, shouldUpdate, nextIndex);\n    if (currentIndex !== -1) {\n      const currentNode = currentNodes[currentIndex];\n      updateQueue.push({\n        type: 'update',\n        currentNode,\n        nextNode,\n        parentNode,\n        path: path.concat(currentIndex),\n      });\n      if (currentIndex < lastIndex) {\n        tmp = {\n          type: 'move',\n          currentNode,\n          nextNode,\n          parentNode,\n          currentIndex,\n          path: path.concat(currentIndex),\n          toPath: path.concat(nextIndex),\n        };\n        insertQueue.push(tmp);\n        removeQueue.push(tmp);\n      }\n      lastIndex = Math.max(currentIndex, lastIndex);\n    } else {\n      insertQueue.push({\n        type: 'new',\n        nextNode,\n        parentNode,\n        toPath: path.concat(nextIndex),\n      });\n    }\n  });\n\n  currentNodes.forEach((currentNode, currentIndex) => {\n    const nextIndex = indexOf(nextNodes, currentNode, shouldUpdate, currentIndex);\n    if (nextIndex === -1) {\n      removeQueue.push({\n        type: 'remove',\n        currentNode,\n        parentNode,\n        currentIndex,\n        path: path.concat(currentIndex),\n      });\n    }\n  });\n\n  removeQueue.sort(sortByIndex);\n\n  if (childrenKey) {\n    updateQueue.concat().forEach((o) => {\n      const currentChildren = o.currentNode[childrenKey] || [];\n      const nextChildren = o.nextNode[childrenKey] || [];\n      // bottom up\n      const ret = diff(currentChildren, nextChildren, options, {\n        path: o.path,\n        parentNode: o.currentNode,\n      });\n      insertQueue = ret.insertQueue.concat(insertQueue);\n      updateQueue = ret.updateQueue.concat(updateQueue);\n      removeQueue = ret.removeQueue.concat(removeQueue);\n    });\n  }\n\n  return {\n    insertQueue,\n    updateQueue,\n    removeQueue,\n  };\n}\n\nexport default function diffTree(currentNodes, nextNodes, options) {\n  return diff(currentNodes, nextNodes, options);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/diff.js\n **/","function patch({ removeQueue, insertQueue, updateQueue }, {\n  processNew,\n  processUpdate,\n  processMove,\n  processRemove,\n}) {\n  updateQueue.forEach((q) => {\n    processUpdate(q);\n  });\n\n  const moves = {};\n\n  removeQueue.forEach((q) => {\n    const ret = processRemove(q);\n    if (q.type === 'move') {\n      moves[q.toPath.join(',')] = ret;\n    }\n  });\n\n  insertQueue.forEach((q) => {\n    if (q.type === 'new') {\n      processNew(q);\n    } else if (q.type === 'move') {\n      processMove(q, moves[q.toPath.join(',')]);\n    }\n  });\n}\n\nexport default patch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/patch.js\n **/"],"sourceRoot":""}