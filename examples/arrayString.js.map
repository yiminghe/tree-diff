{"version":3,"sources":["webpack:///./examples/arrayString.js","webpack:///./index.js","webpack:///./src/index.js","webpack:///./src/diff.js","webpack:///./src/ChildOperationTypes.js","webpack:///./src/patch.js"],"names":["a","b","operations","console","log","processNew","q","splice","toIndex","afterNode","processRemove","r","fromIndex","processUpdate","processMove","module","exports","require","default","diffTree","indexOf","nodes","node","isSame","nodeIndex","len","length","i","nativeShould","sortByIndex","diff","fromNodes","afterNodes","options","internal","shouldUpdate","childrenKey","fromPath","parentNode","insertQueue","updateQueue","removeQueue","lastIndex","tmp","forEach","fromNode","push","type","concat","toPath","Math","max","sort","o","currentChildren","nextChildren","ret","MOVE","UPDATE","REMOVE","NEW","patch","moves","join"],"mappings":";;;;;;;;;;;;;;;AAEA;;AAEA,KAAMA,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAV,C,CAJA;;AAKA,KAAMC,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAV;;AAEA,KAAMC,aAAa,oBAAKF,CAAL,EAAQC,CAAR,CAAnB;;AAEAE,SAAQC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;;AAEA,sBAAMA,UAAN,EAAkB;AAChBG,aADgB,sBACLC,CADK,EACF;AACZN,OAAEO,MAAF,CAASD,EAAEE,OAAX,EAAoB,CAApB,EAAuBF,EAAEG,SAAzB;AACD,IAHe;AAIhBC,gBAJgB,yBAIFJ,CAJE,EAIC;AACf,SAAMK,IAAIX,EAAEM,EAAEM,SAAJ,CAAV;AACAZ,OAAEO,MAAF,CAASD,EAAEM,SAAX,EAAsB,CAAtB;AACA,YAAOD,CAAP;AACD,IARe;AAShBE,gBATgB,2BASA,CACf,CAVe;AAWhBC,cAXgB,uBAWJR,CAXI,EAWDK,CAXC,EAWE;AAChBX,OAAEO,MAAF,CAASD,EAAEE,OAAX,EAAoB,CAApB,EAAuBG,CAAvB;AACD;AAbe,EAAlB;;AAgBAR,SAAQC,GAAR,CAAYJ,CAAZ,EAAeC,CAAf,E;;;;;;;;;AC3BAc,QAAOC,OAAP,GAAiB,mBAAAC,CAAQ,GAAR,CAAjB,C;;;;;;;;;;;;;;;;;;0CCASC,O;;;;;;;;;2CACAA,O;;;;;;;;;;;;;;;;mBC0GeC,Q;;AA3GxB;;AAEA,UAASC,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,SAAtC,EAAiD;AAC/C,OAAMC,MAAMJ,MAAMK,MAAlB;AACA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,GAApB,EAAyBE,GAAzB,EAA8B;AAC5B,SAAIJ,OAAOD,IAAP,EAAaD,MAAMM,CAAN,CAAb,EAAuBH,SAAvB,EAAkCG,CAAlC,CAAJ,EAA0C;AACxC,cAAOA,CAAP;AACD;AACF;AACD,UAAO,CAAC,CAAR;AACD;;AAED,UAASC,YAAT,CAAsB5B,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,UAAOD,MAAMC,CAAb;AACD;;AAED,UAAS4B,WAAT,CAAqB7B,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,OAAID,EAAEY,SAAF,KAAgBX,EAAEW,SAAtB,EAAiC;AAC/B,YAAO,CAAP;AACD;AACD,UAAOZ,EAAEY,SAAF,GAAcX,EAAEW,SAAhB,GAA4B,CAAC,CAA7B,GAAiC,CAAxC;AACD;;AAED;AACA,UAASkB,IAAT,CAAcC,SAAd,EAAyBC,UAAzB,EAAkE;AAAA,OAA7BC,OAA6B,yDAAnB,EAAmB;AAAA,OAAfC,QAAe,yDAAJ,EAAI;AAAA,+BACED,OADF,CACxDE,YADwD;AAAA,OACxDA,YADwD,yCACzCP,YADyC;AAAA,8BACEK,OADF,CAC3BG,WAD2B;AAAA,OAC3BA,WAD2B,wCACb,UADa;AAAA,4BAE1BF,QAF0B,CAExDG,QAFwD;AAAA,OAExDA,QAFwD,sCAE7C,EAF6C;AAAA,OAEzCC,UAFyC,GAE1BJ,QAF0B,CAEzCI,UAFyC;;AAGhE,OAAIC,cAAc,EAAlB;AACA,OAAIC,cAAc,EAAlB;AACA,OAAIC,cAAc,EAAlB;AACA,OAAIC,YAAY,CAAhB;AACA,OAAIC,YAAJ;AACAX,cAAWY,OAAX,CAAmB,UAACnC,SAAD,EAAYD,OAAZ,EAAwB;AACzC,SAAMI,YAAYQ,QAAQW,SAAR,EAAmBtB,SAAnB,EAA8B0B,YAA9B,EAA4C3B,OAA5C,CAAlB;AACA,SAAII,cAAc,CAAC,CAAnB,EAAsB;AACpB,WAAMiC,WAAWd,UAAUnB,SAAV,CAAjB;AACA4B,mBAAYM,IAAZ,CAAiB;AACfC,0CADe;AAEfF,2BAFe;AAGfpC,6BAHe;AAIf6B,+BAJe;AAKf1B,6BALe;AAMfyB,mBAAUA,SAASW,MAAT,CAAgBpC,SAAhB;AANK,QAAjB;AAQA,WAAIA,YAAY8B,SAAhB,EAA2B;AACzBC,eAAM;AACJI,0CADI;AAEJF,6BAFI;AAGJpC,+BAHI;AAIJ6B,iCAJI;AAKJ1B,+BALI;AAMJJ,2BANI;AAOJ6B,qBAAUA,SAASW,MAAT,CAAgBpC,SAAhB,CAPN;AAQJqC,mBAAQZ,SAASW,MAAT,CAAgBxC,OAAhB;AARJ,UAAN;AAUA+B,qBAAYO,IAAZ,CAAiBH,GAAjB;AACAF,qBAAYK,IAAZ,CAAiBH,GAAjB;AACD;AACDD,mBAAYQ,KAAKC,GAAL,CAASvC,SAAT,EAAoB8B,SAApB,CAAZ;AACD,MAzBD,MAyBO;AACLH,mBAAYO,IAAZ,CAAiB;AACfC,uCADe;AAEftC,6BAFe;AAGf6B,+BAHe;AAIf9B,yBAJe;AAKfyC,iBAAQZ,SAASW,MAAT,CAAgBxC,OAAhB;AALO,QAAjB;AAOD;AACF,IApCD;;AAsCAuB,aAAUa,OAAV,CAAkB,UAACC,QAAD,EAAWjC,SAAX,EAAyB;AACzC,SAAMJ,UAAUY,QAAQY,UAAR,EAAoBa,QAApB,EAA8BV,YAA9B,EAA4CvB,SAA5C,CAAhB;AACA,SAAIJ,YAAY,CAAC,CAAjB,EAAoB;AAClBiC,mBAAYK,IAAZ,CAAiB;AACfC,0CADe;AAEfF,2BAFe;AAGfP,+BAHe;AAIf1B,6BAJe;AAKfyB,mBAAUA,SAASW,MAAT,CAAgBpC,SAAhB;AALK,QAAjB;AAOD;AACF,IAXD;;AAaA6B,eAAYW,IAAZ,CAAiBvB,WAAjB;;AAEA,OAAIO,WAAJ,EAAiB;AACfI,iBAAYQ,MAAZ,GAAqBJ,OAArB,CAA6B,UAACS,CAAD,EAAO;AAClC,WAAMC,kBAAkBD,EAAER,QAAF,CAAWT,WAAX,KAA2B,EAAnD;AACA,WAAMmB,eAAeF,EAAE5C,SAAF,CAAY2B,WAAZ,KAA4B,EAAjD;AACA;AACA,WAAMoB,MAAM1B,KAAKwB,eAAL,EAAsBC,YAAtB,EAAoCtB,OAApC,EAA6C;AACvDI,mBAAUgB,EAAEhB,QAD2C;AAEvDC,qBAAYe,EAAER;AAFyC,QAA7C,CAAZ;AAIAN,qBAAciB,IAAIjB,WAAJ,CAAgBS,MAAhB,CAAuBT,WAAvB,CAAd;AACAC,qBAAcgB,IAAIhB,WAAJ,CAAgBQ,MAAhB,CAAuBR,WAAvB,CAAd;AACAC,qBAAce,IAAIf,WAAJ,CAAgBO,MAAhB,CAAuBP,WAAvB,CAAd;AACD,MAXD;AAYD;;AAED,UAAO;AACLF,6BADK;AAELC,6BAFK;AAGLC;AAHK,IAAP;AAKD;;AAEc,UAAStB,QAAT,CAAkBY,SAAlB,EAA6BC,UAA7B,EAAyCC,OAAzC,EAAkD;AAC/D,UAAOH,KAAKC,SAAL,EAAgBC,UAAhB,EAA4BC,OAA5B,CAAP;AACD;;;;;;;;;;;;;AC7GM,KAAMwB,sBAAO,MAAb;AACA,KAAMC,0BAAS,QAAf;AACA,KAAMC,0BAAS,QAAf;AACA,KAAMC,oBAAM,KAAZ,C;;;;;;;;;;;;;ACHP;;AAEA,UAASC,KAAT,cAKG;AAAA,OALcpB,WAKd,QALcA,WAKd;AAAA,OAL2BF,WAK3B,QAL2BA,WAK3B;AAAA,OALwCC,WAKxC,QALwCA,WAKxC;AAAA,OAJDnC,UAIC,SAJDA,UAIC;AAAA,OAHDQ,aAGC,SAHDA,aAGC;AAAA,OAFDC,WAEC,SAFDA,WAEC;AAAA,OADDJ,aACC,SADDA,aACC;;AACD8B,eAAYI,OAAZ,CAAoB,UAACtC,CAAD,EAAO;AACzBO,mBAAcP,CAAd;AACD,IAFD;;AAIA,OAAMwD,QAAQ,EAAd;;AAEArB,eAAYG,OAAZ,CAAoB,UAACtC,CAAD,EAAO;AACzB,SAAMkD,MAAM9C,cAAcJ,CAAd,CAAZ;AACA,SAAIA,EAAEyC,IAAF,8BAAJ,EAAqB;AACnBe,aAAMxD,EAAE2C,MAAF,CAASc,IAAT,CAAc,GAAd,CAAN,IAA4BP,GAA5B;AACD;AACF,IALD;;AAOAjB,eAAYK,OAAZ,CAAoB,UAACtC,CAAD,EAAO;AACzB,SAAIA,EAAEyC,IAAF,6BAAJ,EAAoB;AAClB1C,kBAAWC,CAAX;AACD,MAFD,MAEO,IAAIA,EAAEyC,IAAF,8BAAJ,EAAqB;AAC1BjC,mBAAYR,CAAZ,EAAewD,MAAMxD,EAAE2C,MAAF,CAASc,IAAT,CAAc,GAAd,CAAN,CAAf;AACD;AACF,IAND;AAOD;;mBAEcF,K","file":"arrayString.js","sourcesContent":["/* eslint no-console:0 */\n\nimport { diff, patch } from 'tree-diff';\n\nconst a = ['1', '2', '3'];\nconst b = ['4', '3', '1', '2'];\n\nconst operations = diff(a, b);\n\nconsole.log('operations', operations);\n\npatch(operations, {\n  processNew(q) {\n    a.splice(q.toIndex, 0, q.afterNode);\n  },\n  processRemove(q) {\n    const r = a[q.fromIndex];\n    a.splice(q.fromIndex, 1);\n    return r;\n  },\n  processUpdate() {\n  },\n  processMove(q, r) {\n    a.splice(q.toIndex, 0, r);\n  },\n});\n\nconsole.log(a, b);\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/arrayString.js\n **/","module.exports = require('./src/');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","export { default as diff } from './diff';\nexport { default as patch } from './patch';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { UPDATE, MOVE, REMOVE, NEW } from './ChildOperationTypes';\n\nfunction indexOf(nodes, node, isSame, nodeIndex) {\n  const len = nodes.length;\n  for (let i = 0; i < len; i++) {\n    if (isSame(node, nodes[i], nodeIndex, i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction nativeShould(a, b) {\n  return a === b;\n}\n\nfunction sortByIndex(a, b) {\n  if (a.fromIndex === b.fromIndex) {\n    return 0;\n  }\n  return a.fromIndex > b.fromIndex ? -1 : 1;\n}\n\n// diff by level\nfunction diff(fromNodes, afterNodes, options = {}, internal = {}) {\n  const { shouldUpdate = nativeShould, childrenKey = 'children' } = options;\n  const { fromPath = [], parentNode } = internal;\n  let insertQueue = [];\n  let updateQueue = [];\n  let removeQueue = [];\n  let lastIndex = 0;\n  let tmp;\n  afterNodes.forEach((afterNode, toIndex) => {\n    const fromIndex = indexOf(fromNodes, afterNode, shouldUpdate, toIndex);\n    if (fromIndex !== -1) {\n      const fromNode = fromNodes[fromIndex];\n      updateQueue.push({\n        type: UPDATE,\n        fromNode,\n        afterNode,\n        parentNode,\n        fromIndex,\n        fromPath: fromPath.concat(fromIndex),\n      });\n      if (fromIndex < lastIndex) {\n        tmp = {\n          type: MOVE,\n          fromNode,\n          afterNode,\n          parentNode,\n          fromIndex,\n          toIndex,\n          fromPath: fromPath.concat(fromIndex),\n          toPath: fromPath.concat(toIndex),\n        };\n        insertQueue.push(tmp);\n        removeQueue.push(tmp);\n      }\n      lastIndex = Math.max(fromIndex, lastIndex);\n    } else {\n      insertQueue.push({\n        type: NEW,\n        afterNode,\n        parentNode,\n        toIndex,\n        toPath: fromPath.concat(toIndex),\n      });\n    }\n  });\n\n  fromNodes.forEach((fromNode, fromIndex) => {\n    const toIndex = indexOf(afterNodes, fromNode, shouldUpdate, fromIndex);\n    if (toIndex === -1) {\n      removeQueue.push({\n        type: REMOVE,\n        fromNode,\n        parentNode,\n        fromIndex,\n        fromPath: fromPath.concat(fromIndex),\n      });\n    }\n  });\n\n  removeQueue.sort(sortByIndex);\n\n  if (childrenKey) {\n    updateQueue.concat().forEach((o) => {\n      const currentChildren = o.fromNode[childrenKey] || [];\n      const nextChildren = o.afterNode[childrenKey] || [];\n      // bottom up\n      const ret = diff(currentChildren, nextChildren, options, {\n        fromPath: o.fromPath,\n        parentNode: o.fromNode,\n      });\n      insertQueue = ret.insertQueue.concat(insertQueue);\n      updateQueue = ret.updateQueue.concat(updateQueue);\n      removeQueue = ret.removeQueue.concat(removeQueue);\n    });\n  }\n\n  return {\n    insertQueue,\n    updateQueue,\n    removeQueue,\n  };\n}\n\nexport default function diffTree(fromNodes, afterNodes, options) {\n  return diff(fromNodes, afterNodes, options);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/diff.js\n **/","export const MOVE = 'move';\nexport const UPDATE = 'update';\nexport const REMOVE = 'remove';\nexport const NEW = 'new';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChildOperationTypes.js\n **/","import { MOVE, NEW } from './ChildOperationTypes';\n\nfunction patch({ removeQueue, insertQueue, updateQueue }, {\n  processNew,\n  processUpdate,\n  processMove,\n  processRemove,\n}) {\n  updateQueue.forEach((q) => {\n    processUpdate(q);\n  });\n\n  const moves = {};\n\n  removeQueue.forEach((q) => {\n    const ret = processRemove(q);\n    if (q.type === MOVE) {\n      moves[q.toPath.join(',')] = ret;\n    }\n  });\n\n  insertQueue.forEach((q) => {\n    if (q.type === NEW) {\n      processNew(q);\n    } else if (q.type === MOVE) {\n      processMove(q, moves[q.toPath.join(',')]);\n    }\n  });\n}\n\nexport default patch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/patch.js\n **/"],"sourceRoot":""}